//
// This file was generated via github.com/skx/implant/
//
// Local edits will be lost.
//
package {{.Package}}

import (
    "bytes"
    "compress/gzip"
    "encoding/base64"
    "fmt"
    "io/ioutil"
    "os"
)

//
// EmbeddedResource is the structure which is used to record details of
// each embedded resource in your binary.
//
// The resource contains the (original) filename, relative to the input
// directory `implant` was generated with, along with the original size
// and the compressed/encoded data.
//
type EmbeddedResource struct {
    Filename string
    Contents string
    Length   int
    ModTime  int64
}

//
// RESOURCES is a map containing all embedded resources. The map key is the
// file name.
//
// It is exposed to callers via the `getResources()` function.
//
var RESOURCES = map[string]EmbeddedResource{
	{{range .Resources}}
	"{{.Filename}}": {
		Filename: "{{.Filename}}",
		Contents: "{{.Contents}}",
		Length: {{.Length}},
		ModTime: {{.ModTime}},
	},
	{{end}}
}

func getEmbededResources(path string) ([]byte, error) {
	entry, ok := RESOURCES[path]
	if !ok {
		// Give a try to find local resource
		return nil, nil
	}

	var raw bytes.Buffer
	var err error

	// Decode the data.
	in, err := base64.StdEncoding.DecodeString(entry.Contents)
	if err != nil {
		return nil, err
	}

	// Gunzip the data to the client
	gr, err := gzip.NewReader(bytes.NewBuffer(in))
	if err != nil {
		return nil, err
	}
	defer gr.Close()
	data, err := ioutil.ReadAll(gr)
	if err != nil {
		return nil, err
	}
	_, err = raw.Write(data)
	if err != nil {
		return nil, err
	}

	// Return it.
	return raw.Bytes(), nil

}

//
// Return the contents of a resource.
//
func getResource(path string) ([]byte, error) {
	content, err := getEmbededResources(path)
	
	if err != nil {
		return nil, err
	}
	
	stats, err := os.Stat(path)
	if err != nil {
		// Could not find neither on local system.
		if content == nil {
			// Neither in embedded system.
			return nil, fmt.Errorf("failed to find resource '%s'", path)
		}
		// return embedded resource
		return content, nil
	}
	// if found in both system return the newest version
	modtime := stats.ModTime().Unix()
	if modtime < RESOURCES[path].ModTime {
		// return embedded resource
		return content, nil
	}
	data, err := ioutil.ReadFile(path)
	if err != nil {
		return nil, err
	}
	return data, nil
}

//
// Return the available resources in a slice.
//
func getResources() []EmbeddedResource {
	i := 0
	ret := make([]EmbeddedResource, len(RESOURCES))
	for _, v := range RESOURCES {
		ret[i] = v
		i++
	}
	return ret
}
